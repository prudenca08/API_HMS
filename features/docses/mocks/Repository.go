// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	docses "finalproject/features/docses"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AllDocses provides a mock function with given fields:
func (_m *Repository) AllDocses() ([]docses.Domain, error) {
	ret := _m.Called()

	var r0 []docses.Domain
	if rf, ok := ret.Get(0).(func() []docses.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]docses.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: dsID, domain
func (_m *Repository) Create(dsID int, domain *docses.Domain) (docses.Domain, error) {
	ret := _m.Called(dsID, domain)

	var r0 docses.Domain
	if rf, ok := ret.Get(0).(func(int, *docses.Domain) docses.Domain); ok {
		r0 = rf(dsID, domain)
	} else {
		r0 = ret.Get(0).(docses.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *docses.Domain) error); ok {
		r1 = rf(dsID, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: dsID, id
func (_m *Repository) Delete(dsID int, id int) (string, error) {
	ret := _m.Called(dsID, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, int) string); ok {
		r0 = rf(dsID, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(dsID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DocsesByID provides a mock function with given fields: id
func (_m *Repository) DocsesByID(id int) (docses.Domain, error) {
	ret := _m.Called(id)

	var r0 docses.Domain
	if rf, ok := ret.Get(0).(func(int) docses.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(docses.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: admID, dsID, domain
func (_m *Repository) Update(admID int, dsID int, domain *docses.Domain) (docses.Domain, error) {
	ret := _m.Called(admID, dsID, domain)

	var r0 docses.Domain
	if rf, ok := ret.Get(0).(func(int, int, *docses.Domain) docses.Domain); ok {
		r0 = rf(admID, dsID, domain)
	} else {
		r0 = ret.Get(0).(docses.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, *docses.Domain) error); ok {
		r1 = rf(admID, dsID, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
