// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	patient "finalproject/features/patient"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AllPatient provides a mock function with given fields:
func (_m *Service) AllPatient() ([]patient.Domain, error) {
	ret := _m.Called()

	var r0 []patient.Domain
	if rf, ok := ret.Get(0).(func() []patient.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]patient.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: patID, domain
func (_m *Service) Create(patID int, domain *patient.Domain) (patient.Domain, error) {
	ret := _m.Called(patID, domain)

	var r0 patient.Domain
	if rf, ok := ret.Get(0).(func(int, *patient.Domain) patient.Domain); ok {
		r0 = rf(patID, domain)
	} else {
		r0 = ret.Get(0).(patient.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *patient.Domain) error); ok {
		r1 = rf(patID, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: patID, id
func (_m *Service) Delete(patID int, id int) (string, error) {
	ret := _m.Called(patID, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, int) string); ok {
		r0 = rf(patID, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(patID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatientByID provides a mock function with given fields: id
func (_m *Service) PatientByID(id int) (patient.Domain, error) {
	ret := _m.Called(id)

	var r0 patient.Domain
	if rf, ok := ret.Get(0).(func(int) patient.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(patient.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: admID, patID, domain
func (_m *Service) Update(admID int, patID int, domain *patient.Domain) (patient.Domain, error) {
	ret := _m.Called(admID, patID, domain)

	var r0 patient.Domain
	if rf, ok := ret.Get(0).(func(int, int, *patient.Domain) patient.Domain); ok {
		r0 = rf(admID, patID, domain)
	} else {
		r0 = ret.Get(0).(patient.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, *patient.Domain) error); ok {
		r1 = rf(admID, patID, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
