// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	doctor "finalproject/features/doctor"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AllDoctor provides a mock function with given fields:
func (_m *Service) AllDoctor() ([]doctor.Domain, error) {
	ret := _m.Called()

	var r0 []doctor.Domain
	if rf, ok := ret.Get(0).(func() []doctor.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctor.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: docID, id
func (_m *Service) Delete(docID int, id int) (string, error) {
	ret := _m.Called(docID, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(int, int) string); ok {
		r0 = rf(docID, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(docID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoctorByID provides a mock function with given fields: id
func (_m *Service) DoctorByID(id int) (doctor.Domain, error) {
	ret := _m.Called(id)

	var r0 doctor.Domain
	if rf, ok := ret.Get(0).(func(int) doctor.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(doctor.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: username, password
func (_m *Service) Login(username string, password string) (doctor.Domain, error) {
	ret := _m.Called(username, password)

	var r0 doctor.Domain
	if rf, ok := ret.Get(0).(func(string, string) doctor.Domain); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(doctor.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: domain
func (_m *Service) Register(domain *doctor.Domain) (doctor.Domain, error) {
	ret := _m.Called(domain)

	var r0 doctor.Domain
	if rf, ok := ret.Get(0).(func(*doctor.Domain) doctor.Domain); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(doctor.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*doctor.Domain) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: docID, domain
func (_m *Service) Update(docID int, domain *doctor.Domain) (doctor.Domain, error) {
	ret := _m.Called(docID, domain)

	var r0 doctor.Domain
	if rf, ok := ret.Get(0).(func(int, *doctor.Domain) doctor.Domain); ok {
		r0 = rf(docID, domain)
	} else {
		r0 = ret.Get(0).(doctor.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *doctor.Domain) error); ok {
		r1 = rf(docID, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
